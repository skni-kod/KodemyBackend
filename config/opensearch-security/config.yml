---

# This is the main OpenSearch Security configuration file where authentication
# and authorization is defined.
#
# You need to configure at least one authentication domain in the authc of this file.
# An authentication domain is responsible for extracting the user credentials from
# the request and for validating them against an authentication backend like Active Directory for example.
#
# If more than one authentication domain is configured the first one which succeeds wins.
# If all authentication domains fail then the request is unauthenticated.
# In this case an exception is thrown and/or the HTTP status is set to 401.
#
# After authentication authorization (authz) will be applied. There can be zero or more authorizers which collect
# the roles from a given backend for the authenticated user.
#
# Both, authc and auth can be enabled/disabled separately for REST and TRANSPORT layer. Default is true for both.
#        http_enabled: true
#        transport_enabled: true
#
# For HTTP it is possible to allow anonymous authentication. If that is the case then the HTTP authenticators try to
# find user credentials in the HTTP request. If credentials are found then the user gets regularly authenticated.
# If none can be found the user will be authenticated as an "anonymous" user. This user has always the username "anonymous"
# and one role named "anonymous_backendrole".
# If you enable anonymous authentication all HTTP authenticators will not challenge.
#
# Note: If you define more than one HTTP authenticators make sure to put non-challenging authenticators like "proxy" or "clientcert"
# first and the challenging one last. Because it's not possible to challenge a client with two different authentication methods (for example
# Kerberos and Basic) only one can have the challenge flag set to true. You can cope with this situation
# by using pre-authentication, e.g. sending a HTTP Basic authentication header in the request.
#
# Default value of the challenge flag is true.
#
# HTTP
#   basic (challenging)
#   proxy (not challenging, needs xff)
#   kerberos (challenging)
#   clientcert (not challenging, needs https)
#   jwt (not challenging)
#   host (not challenging) #DEPRECATED, will be removed in a future version.
#                          host based authentication is configurable in roles_mapping

# Authc
#   internal
#   noop
#   ldap

# Authz
#   ldap
#   noop

_meta:
  type: "config"
  config_version: 2

config:
  dynamic:
    # Set filtered_alias_mode to 'disallow' to forbid more than 2 filtered aliases per index
    # Set filtered_alias_mode to 'warn' to allow more than 2 filtered aliases per index but warns about it (default)
    # Set filtered_alias_mode to 'nowarn' to allow more than 2 filtered aliases per index silently
    #filtered_alias_mode: warn
    #do_not_fail_on_forbidden: false
    #kibana:
    # Kibana multitenancy
    #multitenancy_enabled: true
    #private_tenant_enabled: true
    #default_tenant: ""
    #server_username: kibanaserver
    #index: '.kibana'
    http:
      anonymous_auth_enabled: false  # <- Disable anonymous authentication
      xff:
        enabled: false  # <- Disable support for x-forwarded-for
        internalProxies: '192\.168\.0\.10|192\.168\.0\.11' # regex pattern
        #internalProxies: '.*' # trust all internal proxies, regex pattern
        #remoteIpHeader:  'x-forwarded-for'
    authc:
      basic_internal_auth_domain:  # <- Settings for Basic authentication
        description: "Authenticate via HTTP Basic against internal users database"
        http_enabled: true
        transport_enabled: true
        order: 4
        http_authenticator:
          type: basic
          challenge: true
        authentication_backend:
          type: intern  # <- Use local user database
      # kerberos_auth_domain:
      #   http_enabled: false
      #   transport_enabled: false
      #   order: 6
      #   http_authenticator:
      #     type: kerberos
      #     challenge: true
      #     config:
      #       krb_debug: false
      #       strip_realm_from_principal: true
      #   authentication_backend:
      #     type: noop
      # proxy_auth_domain:
      #   description: "Authenticate via proxy"
      #   http_enabled: false
      #   transport_enabled: false
      #   order: 3
      #   http_authenticator:
      #     type: proxy
      #     challenge: false
      #     config:
      #       user_header: "x-proxy-user"
      #       roles_header: "x-proxy-roles"
      #   authentication_backend:
      #     type: noop
      # jwt_auth_domain:
      #   description: "Authenticate via Json Web Token"
      #   http_enabled: false
      #   transport_enabled: false
      #   order: 0
      #   http_authenticator:
      #     type: jwt
      #     challenge: false
      #     config:
      #       signing_key: "base64 encoded HMAC key or public RSA/ECDSA pem key"
      #       jwt_header: "Authorization"
      #       jwt_url_parameter: null
      #       jwt_clock_skew_tolerance_seconds: 30
      #       roles_key: null
      #       subject_key: null
      #   authentication_backend:
      #     type: noop
      # clientcert_auth_domain:
      #   description: "Authenticate via SSL client certificates"
      #   http_enabled: false
      #   transport_enabled: false
      #   order: 2
      #   http_authenticator:
      #     type: clientcert
      #     config:
      #       username_attribute: cn  # optional, if omitted DN becomes username
      #     challenge: false
      #   authentication_backend:
      #     type: noop
      # ldap:
      #   description: "Authenticate via LDAP or Active Directory"
      #   http_enabled: false
      #   transport_enabled: false
      #   order: 5
      #   http_authenticator:
      #     type: basic
      #     challenge: false
      #   authentication_backend:
      #     type: ldap
      #     config:
      #       enable_ssl: false
      #       enable_start_tls: false
      #       enable_ssl_client_auth: false
      #       verify_hostnames: true
      #       hosts:
      #         - localhost:8389
      #       bind_dn: null
      #       password: null
      #       userbase: 'ou=people,dc=example,dc=com'
      #       usersearch: '(sAMAccountName={0})'
      #       username_attribute: null
    authz:
    # roles_from_myldap:
    #   description: "Authorize via LDAP or Active Directory"
    #   http_enabled: false
    #   transport_enabled: false
    #   authorization_backend:
    #     type: ldap
    #     config:
    #       enable_ssl: false
    #       enable_start_tls: false
    #       enable_ssl_client_auth: false
    #       verify_hostnames: true
    #       hosts:
    #         - localhost:8389
    #       bind_dn: null
    #       password: null
    #       rolebase: 'ou=groups,dc=example,dc=com'
    #       rolesearch: '(member={0})'
    #       userroleattribute: null
    #       rolename: cn
    #       resolve_nested_roles: true
    #       userbase: 'ou=people,dc=example,dc=com'
    #       usersearch: '(uid={0})'
