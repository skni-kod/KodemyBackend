server.port: 8084

spring:
  application.name: kodemy-notification
  banner.location: classpath:banner.txt
  cloud:
    function:
      definition: notificationCreated;notificationUpdated
    stream:
      default-binder: rabbit
      bindings:
        notificationCreated-in-0:
          content-type: application/json
          destination: notification-created
          group: kodemy
        notificationUpdated-in-0:
          content-type: application/json
          destination: notification-updated
          group: kodemy
      rabbit:
        bindings:
          notificationCreated-in-0:
            consumer:
              auto-bind-dlq: true
              dead-letter-exchange:
              max-length: 3
          notificationUpdated-in-0:
            consumer:
              auto-bind-dlq: true
              dead-letter-exchange:
              max-length: 3
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://postgres/kodemy?currentSchema=kodemy-notification
    username: postgres
    password: postgres
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    database: postgresql
    hibernate.ddl-auto: validate
    open-in-view: false
    show-sql: true
    properties:
      hibernate.types.print.banner: false
  liquibase:
    change-log: classpath:/db/changelog/db.changelog-root.xml
    contexts: prod
    enabled: true
  rabbitmq:
    host: rabbitmq
    username: rabbitmq
    password: rabbitmq
    port: 5672

management:
  endpoints:
    web:
      base-path: /api/actuator
      exposure:
        include:
          - health
          - info
          - metrics
          - prometheus
  endpoint:
    health:
      show-details: always
      roles: CAN_USE_ACTUATOR
      show-components: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  tracing:
    sampling:
      probability: 1.0

jwt:
  secret-key: P8K53KMRFBWDRH3EBWYV3B9MQG6QU8V59PYRWGDG96MNDCYBQCJ5EEGXT5ZF76E6

network:
  routes:
    front: /
    auth: http://localhost:8081
    backend: http://localhost:8082
  databus:
    connect-timeout-ms: 3_000
    read-timeout-ms: 5_000

app:
  security:
    cors:
      allowed-origins:
        - http://localhost:3000
      credentials: true
      mapping: "/**"

redis:
  host: redis
  password: password